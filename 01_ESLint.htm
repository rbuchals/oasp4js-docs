<!DOCTYPE html>
<html class="js wf-sourcesanspro-n3-active wf-sourcesanspro-n4-active wf-sourcesanspro-n6-active wf-sourcesanspro-n7-active wf-active" lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <meta name="keywords" content="JavaScript, Linter, Linting, Pluggable, Configurable, Code Quality">
  <meta name="description" content="A pluggable and configurable linter tool for identifying and reporting on patterns in JavaScript. Maintain your code quality with ease.">

    
        <title>Configuring ESLint - ESLint - Pluggable JavaScript linter</title>
    


  <link href="http://eslint.org/docs/user-guide/configuring" rel="canonical">
  <style class="anchorjs"></style><link rel="stylesheet" href="01_ESLint_pliki/main.css">
  <link rel="icon" href="http://eslint.org/img/favicon.512x512.png">
  <link rel="alternate" type="application/rss+xml" title="ESLint - Pluggable JavaScript linter" href="http://eslint.org/feed.xml">
<script src="//www.google-analytics.com/analytics.js" async=""></script><script src="01_ESLint_pliki/analytics.js" async=""></script><script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-60915033-1', 'eslint.org');
  ga('send', 'pageview');

</script>
  <link media="all" href="01_ESLint_pliki/l.css" rel="stylesheet"><link media="all" href="01_ESLint_pliki/l_002.css" rel="stylesheet"><script src="01_ESLint_pliki/source-sans-pron3n4n6n7.js"></script>
  <script src="01_ESLint_pliki/lodash3.txt"></script>

</head>
<body>

<input id="eslint-toggle-search" class="eslint-toggle-search-checkbox" type="checkbox">
<header class="navbar navbar-default navbar-demo navbar-fixed-top eslint-nav" id="top" role="banner">
  <div class="container">

    <a href="http://eslint.org/" class="navbar-brand"><img alt="ESLint" src="01_ESLint_pliki/logo.svg" itemprop="image">ESLint</a>

    <div class="eslint-navbar-toggles">
      <button class="navbar-toggle collapsed" type="button" data-toggle="collapse" data-target="#eslint-navbar" aria-controls="eslint-navbar" aria-expanded="false">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>

      <label for="eslint-toggle-search" class="navbar-toggle eslint-toggle-search-open">
        <span class="sr-only">Open search</span>
        <span class="glyphicon glyphicon-search" aria-hidden="true"></span>
      </label>
    </div>

    <nav id="eslint-navbar" class="collapse navbar-collapse eslint-navbar">
      <ul class="nav navbar-nav navbar-right">
        <li class="dropdown">
          <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">User guide<span class="caret"></span></a>
          <ul class="dropdown-menu" role="menu">
            <li><a href="http://eslint.org/docs/user-guide/configuring">Configuring ESLint</a></li>
            <li><a href="http://eslint.org/docs/user-guide/command-line-interface">Command Line Interface</a></li>
            <li><a href="http://eslint.org/docs/rules/">Rules</a></li>
            <li class="divider"></li>
            <li><a href="http://eslint.org/docs/user-guide/migrating-to-1.0.0">Migrating to v1.0.0</a></li>
            <li><a href="http://eslint.org/docs/user-guide/migrating-to-2.0.0">Migrating to v2.0.0</a></li>
            <li><a href="http://eslint.org/docs/user-guide/migrating-to-3.0.0">Migrating to v3.0.0</a></li>
            <li><a href="http://eslint.org/docs/user-guide/integrations">Integrations</a></li>
          </ul>
        </li>
        <li class="dropdown">
          <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">Developer guide<span class="caret"></span></a>
          <ul class="dropdown-menu" role="menu">
            <li><a href="http://eslint.org/docs/developer-guide/architecture">Architecture</a></li>
            <li><a href="http://eslint.org/docs/developer-guide/contributing">Contributing</a></li>
            <li><a href="http://eslint.org/docs/developer-guide/source-code">Get the Source Code</a></li>
            <li><a href="http://eslint.org/docs/developer-guide/development-environment">Set up a Development Environment</a></li>
            <li><a href="http://eslint.org/docs/developer-guide/unit-tests">Run the Unit Tests</a></li>
            <li><a href="http://eslint.org/docs/developer-guide/working-with-rules">Working with Rules</a></li>
            <li><a href="http://eslint.org/docs/developer-guide/working-with-plugins">Working with Plugins</a></li>
            <li><a href="http://eslint.org/docs/developer-guide/shareable-configs">Shareable Configs</a></li>
            <li><a href="http://eslint.org/docs/developer-guide/nodejs-api">Node.js API</a></li>
            <li><a href="http://eslint.org/docs/maintainer-guide">Maintainer guide</a></li>
          </ul>
        </li>
        <li><a href="http://eslint.org/blog/">Blog</a></li>
        <li class="dropdown">
          <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">Demo<span class="caret"></span></a>
          <ul class="dropdown-menu" role="menu">
            <li><a href="http://eslint.org/demo/">ESLint Demo</a></li>
            <li><a href="http://eslint.org/parser/">Espree Demo</a></li>
          </ul>
        </li>
        <li><a href="http://eslint.org/docs/about/">About</a></li>
      </ul>

      <label for="eslint-toggle-search" class="navbar-toggle eslint-toggle-search-open">
        <span class="sr-only">Open search</span>
        <span class="glyphicon glyphicon-search" aria-hidden="true"></span>
      </label>

      <div class="navbar-form navbar-right eslint-search" role="search">
        <div class="input-group">
          <label class="sr-only" aria-label="Search" for="eslint-search-input">Search</label>
          <div class="eslint-search-input-wrapper">
            <span style="position: relative; display: inline-block; direction: ltr;" class="algolia-autocomplete"><span style="position: relative; display: inline-block; direction: ltr;" class="algolia-autocomplete"><input dir="auto" style="position: relative; vertical-align: top;" data-aa-attrs="[object Object]" class="form-control aa-input" id="eslint-search-input" accesskey="s" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" placeholder="Search the docs..." type="text"><pre style="position: absolute; visibility: hidden; white-space: pre; font-family: source-sans-pro,&quot;Helvetica Neue&quot;,Helvetica,Arial,sans-serif; font-size: 17px; font-style: normal; font-variant: normal; font-weight: 400; word-spacing: 0px; letter-spacing: normal; text-indent: 0px; text-rendering: optimizelegibility; text-transform: none;" aria-hidden="true"></pre><span style="position: absolute; top: 100%; z-index: 100; display: none; left: 0px; right: auto;" class="aa-dropdown-menu"><div class="aa-dataset-0"></div></span></span><pre style="position: absolute; visibility: hidden; white-space: pre; font-family: source-sans-pro,&quot;Helvetica Neue&quot;,Helvetica,Arial,sans-serif; font-size: 17px; font-style: normal; font-variant: normal; font-weight: 400; word-spacing: 0px; letter-spacing: normal; text-indent: 0px; text-rendering: optimizelegibility; text-transform: none;" aria-hidden="true"></pre><span style="position: absolute; top: 100%; z-index: 100; display: none; left: 0px; right: auto;" class="aa-dropdown-menu"><div class="aa-dataset-0"></div></span></span>
            <label for="eslint-toggle-search" class="eslint-toggle-search-close">
              <span class="sr-only">Close search</span>
              <span class="glyphicon glyphicon-remove-circle" aria-hidden="true"></span>
            </label>
          </div>
        </div>
      </div>
    </nav>

  </div><!-- /.container -->
</header><!-- /.navbar -->

<main class="doc">
  <article class="container">
    <!-- Note: No pull requests accepted for this file. See README.md in the root directory for details. -->

<h1 id="configuring-eslint">Configuring ESLint</h1>

<p>ESLint is designed to be completely configurable, meaning you can 
turn off every rule and run only with basic syntax validation, or mix 
and match the bundled rules and your custom rules to make ESLint perfect
 for your project. There are two primary ways to configure ESLint:</p>

<ol>
  <li><strong>Configuration Comments</strong> - use JavaScript comments to embed configuration information directly into a file.</li>
  <li><strong>Configuration Files</strong> - use a JavaScript, JSON or 
YAML file to specify configuration information for an entire directory 
and all of its subdirectories. This can be in the form of an <a href="#configuration-file-formats">.eslintrc.*</a> file or an <code class="highlighter-rouge">eslintConfig</code> field in a <code class="highlighter-rouge">package.json</code> file, both of which ESLint will look for and read automatically, or you can specify a configuration file on the <a href="http://eslint.org/docs/user-guide/command-line-interface">command line</a>.</li>
</ol>

<p>There are several pieces of information that can be configured:</p>

<ul>
  <li><strong>Environments</strong> - which environments your script is 
designed to run in. Each environment brings with it a certain set of 
predefined global variables.</li>
  <li><strong>Globals</strong> - the additional global variables your script accesses during execution.</li>
  <li><strong>Rules</strong> - which rules are enabled and at what error level.</li>
</ul>

<p>All of these options give you fine-grained control over how ESLint treats your code.</p>

<h2 id="specifying-parser-options">Specifying Parser Options<a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#specifying-parser-options" aria-label="Anchor link for: specifying parser options" data-anchorjs-icon=""></a><a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#specifying-parser-options" aria-label="Anchor link for: specifying parser options" data-anchorjs-icon=""></a></h2>

<p>ESLint allows you to specify the JavaScript language options you want
 to support. By default, ESLint supports only ECMAScript 5 syntax. You 
can override that setting to enable support for ECMAScript 6 and 7 as 
well as <a href="http://facebook.github.io/jsx/">JSX</a> by using parser options.</p>

<p>Please note that supporting JSX syntax is not the same as supporting 
React. React applies specific semantics to JSX syntax that ESLint 
doesn’t recognize. We recommend using <a href="https://github.com/yannickcr/eslint-plugin-react">eslint-plugin-react</a> if you are using React and want React semantics.</p>

<p>Parser options are set in your <code class="highlighter-rouge">.eslintrc.*</code> file by using the <code class="highlighter-rouge">parserOptions</code> property. The available options are:</p>

<ul>
  <li><code class="highlighter-rouge">ecmaVersion</code> - set to 3, 5 (default), 6, or 7 to specify the version of ECMAScript you want to use.</li>
  <li><code class="highlighter-rouge">sourceType</code> - set to <code class="highlighter-rouge">"script"</code> (default) or <code class="highlighter-rouge">"module"</code> if your code is in ECMAScript modules.</li>
  <li><code class="highlighter-rouge">ecmaFeatures</code> - an object indicating which additional language features you’d like to use:
    <ul>
      <li><code class="highlighter-rouge">globalReturn</code> - allow <code class="highlighter-rouge">return</code> statements in the global scope</li>
      <li><code class="highlighter-rouge">impliedStrict</code> - enable global <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode">strict mode</a> (if <code class="highlighter-rouge">ecmaVersion</code> is 5 or greater)</li>
      <li><code class="highlighter-rouge">jsx</code> - enable <a href="http://facebook.github.io/jsx/">JSX</a></li>
      <li><code class="highlighter-rouge">experimentalObjectRestSpread</code> - enable support for the experimental <a href="https://github.com/sebmarkbage/ecmascript-rest-spread">object rest/spread properties</a> (<strong>IMPORTANT:</strong> This is an experimental feature that may change significantly in the future. It’s recommended that you do <em>not</em> write rules relying on this functionality unless you are willing to incur maintenance cost when it changes.)</li>
    </ul>
  </li>
</ul>

<p>Here’s an example <code class="highlighter-rouge">.eslintrc.json</code> file:</p>

<div class="language-json highlighter-rouge"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nt">"parserOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nt">"ecmaVersion"</span><span class="p">:</span><span class="w"> </span><span class="mi">6</span><span class="p">,</span><span class="w">
        </span><span class="nt">"sourceType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"module"</span><span class="p">,</span><span class="w">
        </span><span class="nt">"ecmaFeatures"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nt">"jsx"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nt">"rules"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nt">"semi"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
</div>

<p>Setting parser options helps ESLint determine what is a parsing error. All language options are <code class="highlighter-rouge">false</code> by default.</p>

<h2 id="specifying-parser">Specifying Parser<a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#specifying-parser" aria-label="Anchor link for: specifying parser" data-anchorjs-icon=""></a><a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#specifying-parser" aria-label="Anchor link for: specifying parser" data-anchorjs-icon=""></a></h2>

<p>By default, ESLint uses <a href="https://github.com/eslint/espree">Espree</a>
 as its parser. You can optionally specify that a different parser 
should be used in your configuration file so long as the parser meets 
the following requirements:</p>

<ol>
  <li>It must be an npm module installed locally.</li>
  <li>It must have an Esprima-compatible interface (it must export a <code class="highlighter-rouge">parse()</code> method).</li>
  <li>It must produce Esprima-compatible AST and token objects.</li>
</ol>

<p>Note that even with these compatibilities, there are no guarantees 
that an external parser will work correctly with ESLint and ESLint will 
not fix bugs related to incompatibilities with other parsers.</p>

<p>To indicate the npm module to use as your parser, specify it using the <code class="highlighter-rouge">parser</code> option in your <code class="highlighter-rouge">.eslintrc</code> file. For example, the following specifies to use Esprima instead of Espree:</p>

<div class="language-json highlighter-rouge"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nt">"parser"</span><span class="p">:</span><span class="w"> </span><span class="s2">"esprima"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"rules"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nt">"semi"</span><span class="p">:</span><span class="w"> </span><span class="s2">"error"</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
</div>

<p>The following parsers are compatible with ESLint:</p>

<ul>
  <li><a href="https://npmjs.com/package/esprima">Esprima</a></li>
  <li><a href="https://npmjs.com/package/babel-eslint">Babel-ESLint</a> - A wrapper around the <a href="http://babeljs.io/">Babel</a> parser that makes it compatible with ESLint.</li>
</ul>

<p>Note when using a custom parser, the <code class="highlighter-rouge">parserOptions</code>
 configuration property is still required for ESLint to work properly 
with features not in ECMAScript 5 by default. Parsers are all passed <code class="highlighter-rouge">parserOptions</code> and may or may not use them to determine which features to enable.</p>

<h2 id="specifying-environments">Specifying Environments<a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#specifying-environments" aria-label="Anchor link for: specifying environments" data-anchorjs-icon=""></a><a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#specifying-environments" aria-label="Anchor link for: specifying environments" data-anchorjs-icon=""></a></h2>

<p>An environment defines global variables that are predefined. The available environments are:</p>

<ul>
  <li><code class="highlighter-rouge">browser</code> - browser global variables.</li>
  <li><code class="highlighter-rouge">node</code> - Node.js global variables and Node.js scoping.</li>
  <li><code class="highlighter-rouge">commonjs</code> - CommonJS global variables and CommonJS scoping (use this for browser-only code that uses Browserify/WebPack).</li>
  <li><code class="highlighter-rouge">shared-node-browser</code> - Globals common to both Node and Browser.</li>
  <li><code class="highlighter-rouge">es6</code> - enable all ECMAScript 6 features except for modules.</li>
  <li><code class="highlighter-rouge">worker</code> - web workers global variables.</li>
  <li><code class="highlighter-rouge">amd</code> - defines <code class="highlighter-rouge">require()</code> and <code class="highlighter-rouge">define()</code> as global variables as per the <a href="https://github.com/amdjs/amdjs-api/wiki/AMD">amd</a> spec.</li>
  <li><code class="highlighter-rouge">mocha</code> - adds all of the Mocha testing global variables.</li>
  <li><code class="highlighter-rouge">jasmine</code> - adds all of the Jasmine testing global variables for version 1.3 and 2.0.</li>
  <li><code class="highlighter-rouge">jest</code> - Jest global variables.</li>
  <li><code class="highlighter-rouge">phantomjs</code> - PhantomJS global variables.</li>
  <li><code class="highlighter-rouge">protractor</code> - Protractor global variables.</li>
  <li><code class="highlighter-rouge">qunit</code> - QUnit global variables.</li>
  <li><code class="highlighter-rouge">jquery</code> - jQuery global variables.</li>
  <li><code class="highlighter-rouge">prototypejs</code> - Prototype.js global variables.</li>
  <li><code class="highlighter-rouge">shelljs</code> - ShellJS global variables.</li>
  <li><code class="highlighter-rouge">meteor</code> - Meteor global variables.</li>
  <li><code class="highlighter-rouge">mongo</code> - MongoDB global variables.</li>
  <li><code class="highlighter-rouge">applescript</code> - AppleScript global variables.</li>
  <li><code class="highlighter-rouge">nashorn</code> - Java 8 Nashorn global variables.</li>
  <li><code class="highlighter-rouge">serviceworker</code> - Service Worker global variables.</li>
  <li><code class="highlighter-rouge">atomtest</code> - Atom test helper globals.</li>
  <li><code class="highlighter-rouge">embertest</code> - Ember test helper globals.</li>
  <li><code class="highlighter-rouge">webextensions</code> - WebExtensions globals.</li>
  <li><code class="highlighter-rouge">greasemonkey</code> - GreaseMonkey globals.</li>
</ul>

<p>These environments are not mutually exclusive, so you can define more than one at a time.</p>

<p>Environments can be specified inside of a file, in configuration files or using the <code class="highlighter-rouge">--env</code> <a href="http://eslint.org/docs/user-guide/command-line-interface">command line</a> flag.</p>

<p>To specify environments using a comment inside of your JavaScript file, use the following format:</p>

<div class="language-js highlighter-rouge"><pre class="highlight"><code><span class="cm">/* eslint-env node, mocha */</span>
</code></pre>
</div>

<p>This enables Node.js and Mocha environments.</p>

<p>To specify environments in a configuration file, use the <code class="highlighter-rouge">env</code> key and specify which environments you want to enable by setting each to <code class="highlighter-rouge">true</code>. For example, the following enables the browser and Node.js environments:</p>

<div class="language-json highlighter-rouge"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nt">"env"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nt">"browser"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
        </span><span class="nt">"node"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
</div>

<p>Or in a <code class="highlighter-rouge">package.json</code> file</p>

<div class="language-json highlighter-rouge"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nt">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"mypackage"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0.0.1"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"eslintConfig"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nt">"env"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nt">"browser"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
            </span><span class="nt">"node"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
</div>

<p>And in YAML:</p>

<div class="language-yaml highlighter-rouge"><pre class="highlight"><code><span class="nn">---</span>
  <span class="s">env</span><span class="pi">:</span>
    <span class="s">browser</span><span class="pi">:</span> <span class="s">true</span>
    <span class="s">node</span><span class="pi">:</span> <span class="s">true</span>
</code></pre>
</div>

<p>If you want to use an environment from a plugin, be sure to specify the plugin name in the <code class="highlighter-rouge">plugins</code> array and then use the unprefixed plugin name, followed by a slash, followed by the environment name. For example:</p>

<div class="language-json highlighter-rouge"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nt">"plugins"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"example"</span><span class="p">],</span><span class="w">
    </span><span class="nt">"env"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nt">"example/custom"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
</div>

<p>Or in a <code class="highlighter-rouge">package.json</code> file</p>

<div class="language-json highlighter-rouge"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nt">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"mypackage"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0.0.1"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"eslintConfig"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nt">"plugins"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"example"</span><span class="p">],</span><span class="w">
        </span><span class="nt">"env"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nt">"example/custom"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
</div>

<p>And in YAML:</p>

<div class="language-yaml highlighter-rouge"><pre class="highlight"><code><span class="nn">---</span>
  <span class="s">plugins</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">example</span>
  <span class="s">env</span><span class="pi">:</span>
    <span class="s">example/custom</span><span class="pi">:</span> <span class="s">true</span>
</code></pre>
</div>

<h2 id="specifying-globals">Specifying Globals<a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#specifying-globals" aria-label="Anchor link for: specifying globals" data-anchorjs-icon=""></a><a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#specifying-globals" aria-label="Anchor link for: specifying globals" data-anchorjs-icon=""></a></h2>

<p>The <a href="http://eslint.org/docs/rules/no-undef">no-undef</a> rule
 will warn on variables that are accessed but not defined within the 
same file. If you are using global variables inside of a file then it’s 
worthwhile to define those globals so that ESLint will not warn about 
their usage. You can define global variables either using comments 
inside of a file or in the configuration file.</p>

<p>To specify globals using a comment inside of your JavaScript file, use the following format:</p>

<div class="language-js highlighter-rouge"><pre class="highlight"><code><span class="cm">/* global var1, var2 */</span>
</code></pre>
</div>

<p>This defines two global variables, <code class="highlighter-rouge">var1</code> and <code class="highlighter-rouge">var2</code>.
 If you want to optionally specify that these global variables should 
never be written to (only read), then you can set each with a <code class="highlighter-rouge">false</code> flag:</p>

<div class="language-js highlighter-rouge"><pre class="highlight"><code><span class="cm">/* global var1:false, var2:false */</span>
</code></pre>
</div>

<p>To configure global variables inside of a configuration file, use the <code class="highlighter-rouge">globals</code> key and indicate the global variables you want to use. Set each global variable name equal to <code class="highlighter-rouge">true</code> to allow the variable to be overwritten or <code class="highlighter-rouge">false</code> to disallow overwriting. For example:</p>

<div class="language-json highlighter-rouge"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nt">"globals"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nt">"var1"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
        </span><span class="nt">"var2"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
</div>

<p>And in YAML:</p>

<div class="language-yaml highlighter-rouge"><pre class="highlight"><code><span class="nn">---</span>
  <span class="s">globals</span><span class="pi">:</span>
    <span class="s">var1</span><span class="pi">:</span> <span class="s">true</span>
    <span class="s">var2</span><span class="pi">:</span> <span class="s">false</span>
</code></pre>
</div>

<p>These examples allow <code class="highlighter-rouge">var1</code> to be overwritten in your code, but disallow it for <code class="highlighter-rouge">var2</code>.</p>

<p><strong>Note:</strong> Enable the <a href="http://eslint.org/docs/rules/no-global-assign">no-global-assign</a> rule to disallow modifications to read-only global variables in your code.</p>

<h2 id="configuring-plugins">Configuring Plugins<a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#configuring-plugins" aria-label="Anchor link for: configuring plugins" data-anchorjs-icon=""></a><a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#configuring-plugins" aria-label="Anchor link for: configuring plugins" data-anchorjs-icon=""></a></h2>

<p>ESLint supports the use of third-party plugins. Before using the plugin you have to install it using npm.</p>

<p>To configure plugins inside of a configuration file, use the <code class="highlighter-rouge">plugins</code> key, which contains a list of plugin names. The <code class="highlighter-rouge">eslint-plugin-</code> prefix can be omitted from the plugin name.</p>

<div class="language-json highlighter-rouge"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nt">"plugins"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"plugin1"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"eslint-plugin-plugin2"</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
</div>

<p>And in YAML:</p>

<div class="language-yaml highlighter-rouge"><pre class="highlight"><code><span class="nn">---</span>
  <span class="s">plugins</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">plugin1</span>
    <span class="pi">-</span> <span class="s">eslint-plugin-plugin2</span>
</code></pre>
</div>

<p><strong>Note:</strong> A globally-installed instance of ESLint can 
only use globally-installed ESLint plugins. A locally-installed ESLint 
can make use of both locally- and globally- installed ESLint plugins.</p>

<h2 id="configuring-rules">Configuring Rules<a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#configuring-rules" aria-label="Anchor link for: configuring rules" data-anchorjs-icon=""></a><a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#configuring-rules" aria-label="Anchor link for: configuring rules" data-anchorjs-icon=""></a></h2>

<p>ESLint comes with a large number of rules. You can modify which rules
 your project uses either using configuration comments or configuration 
files. To change a rule setting, you must set the rule ID equal to one 
of these values:</p>

<ul>
  <li><code class="highlighter-rouge">"off"</code> or <code class="highlighter-rouge">0</code> - turn the rule off</li>
  <li><code class="highlighter-rouge">"warn"</code> or <code class="highlighter-rouge">1</code> - turn the rule on as a warning (doesn’t affect exit code)</li>
  <li><code class="highlighter-rouge">"error"</code> or <code class="highlighter-rouge">2</code> - turn the rule on as an error (exit code is 1 when triggered)</li>
</ul>

<p>To configure rules inside of a file using configuration comments, use a comment in the following format:</p>

<div class="language-js highlighter-rouge"><pre class="highlight"><code><span class="cm">/* eslint eqeqeq: "off", curly: "error" */</span>
</code></pre>
</div>

<p>In this example, <a href="http://eslint.org/docs/rules/eqeqeq"><code class="highlighter-rouge">eqeqeq</code></a> is turned off and <a href="http://eslint.org/docs/rules/curly"><code class="highlighter-rouge">curly</code></a> is turned on as an error. You can also use the numeric equivalent for the rule severity:</p>

<div class="language-js highlighter-rouge"><pre class="highlight"><code><span class="cm">/* eslint eqeqeq: 0, curly: 2 */</span>
</code></pre>
</div>

<p>This example is the same as the last example, only it uses the numeric codes instead of the string values. The <code class="highlighter-rouge">eqeqeq</code> rule is off and the <code class="highlighter-rouge">curly</code> rule is set to be an error.</p>

<p>If a rule has additional options, you can specify them using array literal syntax, such as:</p>

<div class="language-js highlighter-rouge"><pre class="highlight"><code><span class="cm">/* eslint quotes: ["error", "double"], curly: 2 */</span>
</code></pre>
</div>

<p>This comment specifies the “double” option for the <a href="http://eslint.org/docs/rules/quotes"><code class="highlighter-rouge">quotes</code></a> rule. The first item in the array is always the rule severity (number or string).</p>

<p>To configure rules inside of a configuration file, use the <code class="highlighter-rouge">rules</code> key along with an error level and any options you want to use. For example:</p>

<div class="language-json highlighter-rouge"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nt">"rules"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nt">"eqeqeq"</span><span class="p">:</span><span class="w"> </span><span class="s2">"off"</span><span class="p">,</span><span class="w">
        </span><span class="nt">"curly"</span><span class="p">:</span><span class="w"> </span><span class="s2">"error"</span><span class="p">,</span><span class="w">
        </span><span class="nt">"quotes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"error"</span><span class="p">,</span><span class="w"> </span><span class="s2">"double"</span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
</div>

<p>And in YAML:</p>

<div class="language-yaml highlighter-rouge"><pre class="highlight"><code><span class="nn">---</span>
<span class="s">rules</span><span class="pi">:</span>
  <span class="s">eqeqeq</span><span class="pi">:</span> <span class="s">off</span>
  <span class="s">curly</span><span class="pi">:</span> <span class="s">error</span>
  <span class="s">quotes</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">error</span>
    <span class="pi">-</span> <span class="s">double</span>
</code></pre>
</div>

<p>To configure a rule which is defined within a plugin you have to prefix the rule ID with the plugin name and a <code class="highlighter-rouge">/</code>. For example:</p>

<div class="language-json highlighter-rouge"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nt">"plugins"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"plugin1"</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nt">"rules"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nt">"eqeqeq"</span><span class="p">:</span><span class="w"> </span><span class="s2">"off"</span><span class="p">,</span><span class="w">
        </span><span class="nt">"curly"</span><span class="p">:</span><span class="w"> </span><span class="s2">"error"</span><span class="p">,</span><span class="w">
        </span><span class="nt">"quotes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"error"</span><span class="p">,</span><span class="w"> </span><span class="s2">"double"</span><span class="p">],</span><span class="w">
        </span><span class="nt">"plugin1/rule1"</span><span class="p">:</span><span class="w"> </span><span class="s2">"error"</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
</div>

<p>And in YAML:</p>

<div class="language-yaml highlighter-rouge"><pre class="highlight"><code><span class="nn">---</span>
<span class="s">plugins</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">plugin1</span>
<span class="s">rules</span><span class="pi">:</span>
  <span class="s">eqeqeq</span><span class="pi">:</span> <span class="s">0</span>
  <span class="s">curly</span><span class="pi">:</span> <span class="s">error</span>
  <span class="s">quotes</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">error</span>
    <span class="pi">-</span> <span class="s2">"</span><span class="s">double"</span>
  <span class="s">plugin1/rule1</span><span class="pi">:</span> <span class="s">error</span>
</code></pre>
</div>

<p>In these configuration files, the rule <code class="highlighter-rouge">plugin1/rule1</code> comes from the plugin named <code class="highlighter-rouge">plugin1</code>. You can also use this format with configuration comments, such as:</p>

<div class="language-js highlighter-rouge"><pre class="highlight"><code><span class="cm">/* eslint "plugin1/rule1": "error" */</span>
</code></pre>
</div>

<p><strong>Note:</strong> When specifying rules from plugins, make sure to omit <code class="highlighter-rouge">eslint-plugin-</code>. ESLint uses only the unprefixed name internally to locate rules.</p>

<h2 id="disabling-rules-with-inline-comments">Disabling Rules with Inline Comments<a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#disabling-rules-with-inline-comments" aria-label="Anchor link for: disabling rules with inline comments" data-anchorjs-icon=""></a><a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#disabling-rules-with-inline-comments" aria-label="Anchor link for: disabling rules with inline comments" data-anchorjs-icon=""></a></h2>

<p>To temporarily disable rule warnings in your file, use block comments in the following format:</p>

<div class="language-js highlighter-rouge"><pre class="highlight"><code><span class="cm">/* eslint-disable */</span>

<span class="nx">alert</span><span class="p">(</span><span class="s1">'foo'</span><span class="p">);</span>

<span class="cm">/* eslint-enable */</span>
</code></pre>
</div>

<p>You can also disable or enable warnings for specific rules:</p>

<div class="language-js highlighter-rouge"><pre class="highlight"><code><span class="cm">/* eslint-disable no-alert, no-console */</span>

<span class="nx">alert</span><span class="p">(</span><span class="s1">'foo'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'bar'</span><span class="p">);</span>

<span class="cm">/* eslint-enable no-alert, no-console */</span>
</code></pre>
</div>

<p>To disable rule warnings in an entire file, put a <code class="highlighter-rouge">/* eslint-disable */</code> block comment at the top of the file:</p>

<div class="language-js highlighter-rouge"><pre class="highlight"><code><span class="cm">/* eslint-disable */</span>

<span class="nx">alert</span><span class="p">(</span><span class="s1">'foo'</span><span class="p">);</span>
</code></pre>
</div>

<p>You can also disable or enable specific rules for an entire file:</p>

<div class="language-js highlighter-rouge"><pre class="highlight"><code><span class="cm">/* eslint-disable no-alert */</span>

<span class="nx">alert</span><span class="p">(</span><span class="s1">'foo'</span><span class="p">);</span>
</code></pre>
</div>

<p>To disable all rules on a specific line, use a line comment in one of the following formats:</p>

<div class="language-js highlighter-rouge"><pre class="highlight"><code><span class="nx">alert</span><span class="p">(</span><span class="s1">'foo'</span><span class="p">);</span> <span class="c1">// eslint-disable-line</span>

<span class="c1">// eslint-disable-next-line</span>
<span class="nx">alert</span><span class="p">(</span><span class="s1">'foo'</span><span class="p">);</span>
</code></pre>
</div>

<p>To disable a specific rule on a specific line:</p>

<div class="language-js highlighter-rouge"><pre class="highlight"><code><span class="nx">alert</span><span class="p">(</span><span class="s1">'foo'</span><span class="p">);</span> <span class="c1">// eslint-disable-line no-alert</span>

<span class="c1">// eslint-disable-next-line no-alert</span>
<span class="nx">alert</span><span class="p">(</span><span class="s1">'foo'</span><span class="p">);</span>
</code></pre>
</div>

<p>To disable multiple rules on a specific line:</p>

<div class="language-js highlighter-rouge"><pre class="highlight"><code><span class="nx">alert</span><span class="p">(</span><span class="s1">'foo'</span><span class="p">);</span> <span class="c1">// eslint-disable-line no-alert, quotes, semi</span>

<span class="c1">// eslint-disable-next-line no-alert, quotes, semi</span>
<span class="nx">alert</span><span class="p">(</span><span class="s1">'foo'</span><span class="p">);</span>
</code></pre>
</div>

<p>All of the above methods also work for plugin rules. For example, to disable <code class="highlighter-rouge">eslint-plugin-example</code>’s <code class="highlighter-rouge">rule-name</code> rule, combine the plugin’s name (<code class="highlighter-rouge">example</code>) and the rule’s name (<code class="highlighter-rouge">rule-name</code>) into <code class="highlighter-rouge">example/rule-name</code>:</p>

<div class="language-js highlighter-rouge"><pre class="highlight"><code><span class="nx">foo</span><span class="p">();</span> <span class="c1">// eslint-disable-line example/rule-name</span>
</code></pre>
</div>

<p><strong>Note:</strong> Comments that disable warnings for a portion 
of a file tell ESLint not to report rule violations for the disabled 
code. ESLint still parses the entire file, however, so disabled code 
still needs to be syntactically valid JavaScript.</p>

<h2 id="adding-shared-settings">Adding Shared Settings<a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#adding-shared-settings" aria-label="Anchor link for: adding shared settings" data-anchorjs-icon=""></a><a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#adding-shared-settings" aria-label="Anchor link for: adding shared settings" data-anchorjs-icon=""></a></h2>

<p>ESLint supports adding shared settings into configuration file. You can add <code class="highlighter-rouge">settings</code>
 object to ESLint configuration file and it will be supplied to every 
rule that will be executed. This may be useful if you are adding custom 
rules and want them to have access to the same information and be easily
 configurable.</p>

<p>In JSON:</p>

<div class="language-json highlighter-rouge"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nt">"settings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nt">"sharedData"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Hello"</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
</div>

<p>And in YAML:</p>

<div class="language-yaml highlighter-rouge"><pre class="highlight"><code><span class="nn">---</span>
  <span class="s">settings</span><span class="pi">:</span>
    <span class="s">sharedData</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Hello"</span>
</code></pre>
</div>

<h2 id="using-configuration-files">Using Configuration Files<a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#using-configuration-files" aria-label="Anchor link for: using configuration files" data-anchorjs-icon=""></a><a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#using-configuration-files" aria-label="Anchor link for: using configuration files" data-anchorjs-icon=""></a></h2>

<p>There are two ways to use configuration files. The first is to save 
the file wherever you would like and pass its location to the CLI using 
the <code class="highlighter-rouge">-c</code> option, such as:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>eslint -c myconfig.json myfiletotest.js
</code></pre>
</div>

<p>The second way to use configuration files is via <code class="highlighter-rouge">.eslintrc.*</code> and <code class="highlighter-rouge">package.json</code>
 files. ESLint will automatically look for them in the directory of the 
file to be linted, and in successive parent directories all the way up 
to the root directory of the filesystem. This option is useful when you 
want different configurations for different parts of a project or when 
you want others to be able to use ESLint directly without needing to 
remember to pass in the configuration file.</p>

<p>In each case, the settings in the configuration file override default settings.</p>

<h2 id="configuration-file-formats">Configuration File Formats<a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#configuration-file-formats" aria-label="Anchor link for: configuration file formats" data-anchorjs-icon=""></a><a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#configuration-file-formats" aria-label="Anchor link for: configuration file formats" data-anchorjs-icon=""></a></h2>

<p>ESLint supports configuration files in several formats:</p>

<ul>
  <li><strong>JavaScript</strong> - use <code class="highlighter-rouge">.eslintrc.js</code> and export an object containing your configuration.</li>
  <li><strong>YAML</strong> - use <code class="highlighter-rouge">.eslintrc.yaml</code> or <code class="highlighter-rouge">.eslintrc.yml</code> to define the configuration structure.</li>
  <li><strong>JSON</strong> - use <code class="highlighter-rouge">.eslintrc.json</code> to define the configuration structure. ESLint’s JSON files also allow JavaScript-style comments.</li>
  <li><strong>Deprecated</strong> - use <code class="highlighter-rouge">.eslintrc</code>, which can be either JSON or YAML.</li>
  <li><strong>package.json</strong> - create an <code class="highlighter-rouge">eslintConfig</code> property in your <code class="highlighter-rouge">package.json</code> file and define your configuration there.</li>
</ul>

<p>If there are multiple configuration files in the same directory, ESLint will only use one. The priority order is:</p>

<ol>
  <li><code class="highlighter-rouge">.eslintrc.js</code></li>
  <li><code class="highlighter-rouge">.eslintrc.yaml</code></li>
  <li><code class="highlighter-rouge">.eslintrc.yml</code></li>
  <li><code class="highlighter-rouge">.eslintrc.json</code></li>
  <li><code class="highlighter-rouge">.eslintrc</code></li>
  <li><code class="highlighter-rouge">package.json</code></li>
</ol>

<h2 id="configuration-cascading-and-hierarchy">Configuration Cascading and Hierarchy<a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#configuration-cascading-and-hierarchy" aria-label="Anchor link for: configuration cascading and hierarchy" data-anchorjs-icon=""></a><a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#configuration-cascading-and-hierarchy" aria-label="Anchor link for: configuration cascading and hierarchy" data-anchorjs-icon=""></a></h2>

<p>When using <code class="highlighter-rouge">.eslintrc.*</code> and <code class="highlighter-rouge">package.json</code>
 files for configuration, you can take advantage of configuration 
cascading. For instance, suppose you have the following structure:</p>

<div class="language-text highlighter-rouge"><pre class="highlight"><code>your-project
├── .eslintrc
├── lib
│ └── source.js
└─┬ tests
  ├── .eslintrc
  └── test.js
</code></pre>
</div>

<p>The configuration cascade works by using the closest <code class="highlighter-rouge">.eslintrc</code>
 file to the file being linted as the highest priority, then any 
configuration files in the parent directory, and so on. When you run 
ESLint on this project, all files in <code class="highlighter-rouge">lib/</code> will use the <code class="highlighter-rouge">.eslintrc</code> file at the root of the project as their configuration. When ESLint traverses into the <code class="highlighter-rouge">tests/</code> directory, it will then use <code class="highlighter-rouge">your-project/tests/.eslintrc</code> in addition to <code class="highlighter-rouge">your-project/.eslintrc</code>. So <code class="highlighter-rouge">your-project/tests/test.js</code> is linted based on the combination of the two <code class="highlighter-rouge">.eslintrc</code>
 files in its directory hierarchy, with the closest one taking priority.
 In this way, you can have project-level ESLint settings and also have 
directory-specific overrides.</p>

<p>In the same way, if there is a <code class="highlighter-rouge">package.json</code> file in the root directory with an <code class="highlighter-rouge">eslintConfig</code> field, the configuration it describes will apply to all subdirectories beneath it, but the configuration described by the <code class="highlighter-rouge">.eslintrc</code> file in the tests directory will override it where there are conflicting specifications.</p>

<div class="language-text highlighter-rouge"><pre class="highlight"><code>your-project
├── package.json
├── lib
│ └── source.js
└─┬ tests
  ├── .eslintrc
  └── test.js
</code></pre>
</div>

<p>If there is an <code class="highlighter-rouge">.eslintrc</code> and a <code class="highlighter-rouge">package.json</code> file found in the same directory, <code class="highlighter-rouge">.eslintrc</code> will take a priority and <code class="highlighter-rouge">package.json</code> file will not be used.</p>

<p><strong>Note:</strong> If you have a personal configuration file in your home directory (<code class="highlighter-rouge">~/.eslintrc</code>),
 it will only be used if no other configuration files are found. Since a
 personal configuration would apply to everything inside of a user’s 
directory, including third-party code, this could cause problems when 
running ESLint.</p>

<p>By default, ESLint will look for configuration files in all parent 
folders up to the root directory. This can be useful if you want all of 
your projects to follow a certain convention, but can sometimes lead to 
unexpected results. To limit ESLint to a specific project, place <code class="highlighter-rouge">"root": true</code> inside the <code class="highlighter-rouge">eslintConfig</code> field of the <code class="highlighter-rouge">package.json</code> file or in the <code class="highlighter-rouge">.eslintrc.*</code> file at your project’s root level.  ESLint will stop looking in parent folders once it finds a configuration with <code class="highlighter-rouge">"root": true</code>.</p>

<div class="language-js highlighter-rouge"><pre class="highlight"><code><span class="p">{</span>
    <span class="s2">"root"</span><span class="err">:</span> <span class="kc">true</span>
<span class="p">}</span>
</code></pre>
</div>

<p>And in YAML:</p>

<div class="language-yaml highlighter-rouge"><pre class="highlight"><code><span class="nn">---</span>
  <span class="s">root</span><span class="pi">:</span> <span class="s">true</span>
</code></pre>
</div>

<p>For example, consider <code class="highlighter-rouge">projectA</code> which has <code class="highlighter-rouge">"root": true</code> set in the <code class="highlighter-rouge">.eslintrc</code> file in the main project directory.  In this case, while linting <code class="highlighter-rouge">main.js</code>, the configurations within <code class="highlighter-rouge">lib/</code>will be used, but the <code class="highlighter-rouge">.eslintrc</code> file in <code class="highlighter-rouge">projectA/</code> will not.</p>

<div class="language-text highlighter-rouge"><pre class="highlight"><code>home
└── user
    ├── .eslintrc &lt;- Always skipped if other configs present
    └── projectA
        ├── .eslintrc  &lt;- Not used
        └── lib
            ├── .eslintrc  &lt;- { "root": true }
            └── main.js
</code></pre>
</div>

<p>The complete configuration hierarchy, from highest precedence to lowest precedence, is as follows:</p>

<ol>
  <li>Inline configuration
    <ol>
      <li><code class="highlighter-rouge">/*eslint-disable*/</code> and <code class="highlighter-rouge">/*eslint-enable*/</code></li>
      <li><code class="highlighter-rouge">/*global*/</code></li>
      <li><code class="highlighter-rouge">/*eslint*/</code></li>
      <li><code class="highlighter-rouge">/*eslint-env*/</code></li>
    </ol>
  </li>
  <li>Command line options:
    <ol>
      <li><code class="highlighter-rouge">--global</code></li>
      <li><code class="highlighter-rouge">--rule</code></li>
      <li><code class="highlighter-rouge">--env</code></li>
      <li><code class="highlighter-rouge">-c</code>, <code class="highlighter-rouge">--config</code></li>
    </ol>
  </li>
  <li>Project-level configuration:
    <ol>
      <li><code class="highlighter-rouge">.eslintrc.*</code> or <code class="highlighter-rouge">package.json</code> file in same directory as linted file</li>
      <li>Continue searching for <code class="highlighter-rouge">.eslintrc</code> and <code class="highlighter-rouge">package.json</code>
 files in ancestor directories (parent has highest precedence, then 
grandparent, etc.), up to and including the root directory or until a 
config with <code class="highlighter-rouge">"root": true</code> is found.</li>
      <li>In the absence of any configuration from (1) thru (3), fall back to a personal default configuration in  <code class="highlighter-rouge">~/.eslintrc</code>.</li>
    </ol>
  </li>
</ol>

<h2 id="extending-configuration-files">Extending Configuration Files<a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#extending-configuration-files" aria-label="Anchor link for: extending configuration files" data-anchorjs-icon=""></a><a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#extending-configuration-files" aria-label="Anchor link for: extending configuration files" data-anchorjs-icon=""></a></h2>

<p>A configuration file can extend the set of enabled rules from base configurations.</p>

<p>The <code class="highlighter-rouge">extends</code> property value is either:</p>

<ul>
  <li>a string that specifies a configuration</li>
  <li>an array of strings: each additional configuration extends the preceding configurations</li>
</ul>

<p>ESLint extends configurations recursively so a base configuration can also have an <code class="highlighter-rouge">extends</code> property.</p>

<p>The <code class="highlighter-rouge">rules</code> property can do any of the following to extend (or override) the set of rules:</p>

<ul>
  <li>enable additional rules</li>
  <li>override default options for rules from base configurations</li>
  <li>disable rules from base configurations</li>
</ul>

<h3 id="using-eslintrecommended">Using <code class="highlighter-rouge">"eslint:recommended"</code><a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#using-eslintrecommended" aria-label="Anchor link for: using eslintrecommended" data-anchorjs-icon=""></a><a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#using-eslintrecommended" aria-label="Anchor link for: using eslintrecommended" data-anchorjs-icon=""></a></h3>

<p>An <code class="highlighter-rouge">extends</code> property value <code class="highlighter-rouge">"eslint:recommended"</code> enables a subset of core rules that report common problems, which have a check mark <span title="recommended" aria-label="recommended" class="glyphicon glyphicon-ok"></span> on the <a href="http://eslint.org/docs/rules/">rules page</a>. The recommended subset can change only at major versions of ESLint.</p>

<p>If your configuration extends the recommended rules: after you 
upgrade to a newer major version of ESLint, review the reported problems
 before you use the <code class="highlighter-rouge">--fix</code> option on the <a href="http://eslint.org/docs/user-guide/command-line-interface#fix">command line</a>, so you know if a new fixable recommended rule will make changes to the code.</p>

<p>The <code class="highlighter-rouge">eslint --init</code> command can create a configuration so you can extend the recommended rules.</p>

<p>Example of a configuration file in JavaScript format:</p>

<div class="language-js highlighter-rouge"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s2">"extends"</span><span class="p">:</span> <span class="s2">"eslint:recommended"</span><span class="p">,</span>
    <span class="s2">"rules"</span><span class="p">:</span> <span class="p">{</span>
        <span class="c1">// enable additional rules</span>
        <span class="s2">"indent"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"error"</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
        <span class="s2">"linebreak-style"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"error"</span><span class="p">,</span> <span class="s2">"unix"</span><span class="p">],</span>
        <span class="s2">"quotes"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"error"</span><span class="p">,</span> <span class="s2">"double"</span><span class="p">],</span>
        <span class="s2">"semi"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"error"</span><span class="p">,</span> <span class="s2">"always"</span><span class="p">],</span>

        <span class="c1">// override default options for rules from base configurations</span>
        <span class="s2">"comma-dangle"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"error"</span><span class="p">,</span> <span class="s2">"always"</span><span class="p">],</span>
        <span class="s2">"no-cond-assign"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"error"</span><span class="p">,</span> <span class="s2">"always"</span><span class="p">],</span>

        <span class="c1">// disable rules from base configurations</span>
        <span class="s2">"no-console"</span><span class="p">:</span> <span class="s2">"off"</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre>
</div>

<h3 id="using-a-shareable-configuration-package">Using a shareable configuration package<a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#using-a-shareable-configuration-package" aria-label="Anchor link for: using a shareable configuration package" data-anchorjs-icon=""></a><a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#using-a-shareable-configuration-package" aria-label="Anchor link for: using a shareable configuration package" data-anchorjs-icon=""></a></h3>

<p>A <a href="http://eslint.org/docs/developer-guide/shareable-configs">sharable configuration</a>
 is an npm package that exports a configuration object. Make sure the 
package has been installed to a directory where ESLint can require it.</p>

<p>The <code class="highlighter-rouge">extends</code> property value can omit the <code class="highlighter-rouge">eslint-config-</code> prefix of the package name.</p>

<p>The <code class="highlighter-rouge">eslint --init</code> command can create a configuration so you can extend a popular style guide (for example, <code class="highlighter-rouge">eslint-config-standard</code>).</p>

<p>Example of a configuration file in YAML format:</p>

<div class="language-yaml highlighter-rouge"><pre class="highlight"><code><span class="s">extends</span><span class="pi">:</span> <span class="s">standard</span>
<span class="s">rules</span><span class="pi">:</span>
  <span class="s">comma-dangle</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">error</span>
    <span class="pi">-</span> <span class="s">always</span>
  <span class="s">no-empty</span><span class="pi">:</span> <span class="s">warn</span>
</code></pre>
</div>

<h3 id="using-the-configuration-from-a-plugin">Using the configuration from a plugin<a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#using-the-configuration-from-a-plugin" aria-label="Anchor link for: using the configuration from a plugin" data-anchorjs-icon=""></a><a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#using-the-configuration-from-a-plugin" aria-label="Anchor link for: using the configuration from a plugin" data-anchorjs-icon=""></a></h3>

<p>A <a href="http://eslint.org/docs/developer-guide/working-with-plugins">plugin</a> is an npm package that usually exports rules. Some plugins also export one or more named <a href="http://eslint.org/docs/developer-guide/working-with-plugins#configs-in-plugins">configurations</a>. Make sure the package has been installed to a directory where ESLint can require it.</p>

<p>The <code class="highlighter-rouge">plugins</code> <a href="#configuring-plugins">property value</a> can omit the <code class="highlighter-rouge">eslint-plugin-</code> prefix of the package name.</p>

<p>The <code class="highlighter-rouge">extends</code> property value can consist of:</p>

<ul>
  <li><code class="highlighter-rouge">plugin:</code></li>
  <li>the package name (from which you can omit the prefix, for example, <code class="highlighter-rouge">react</code>)</li>
  <li><code class="highlighter-rouge">/</code></li>
  <li>the configuration name (for example, <code class="highlighter-rouge">recommended</code>)</li>
</ul>

<p>Example of a configuration file in JSON format:</p>

<div class="language-json highlighter-rouge"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nt">"plugins"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"react"</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nt">"extends"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"eslint:recommended"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"plugin:react/recommended"</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nt">"rules"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
       </span><span class="nt">"no-set-state"</span><span class="p">:</span><span class="w"> </span><span class="s2">"off"</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
</div>

<h3 id="using-a-configuration-file">Using a configuration file<a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#using-a-configuration-file" aria-label="Anchor link for: using a configuration file" data-anchorjs-icon=""></a><a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#using-a-configuration-file" aria-label="Anchor link for: using a configuration file" data-anchorjs-icon=""></a></h3>

<p>The <code class="highlighter-rouge">extends</code> property value can be an absolute or relative path to a base <a href="#using-configuration-files">configuration file</a>.</p>

<p>ESLint resolves a relative path to a base configuration file relative to the configuration file that uses it <strong>unless</strong>
 that file is in your home directory or a directory that isn’t an 
ancestor to the directory in which ESLint is installed (either locally 
or globally). In those cases, ESLint resolves the relative path to the 
base file relative to the linted <strong>project</strong> directory (typically the current working directory).</p>

<p>Example of a configuration file in JSON format:</p>

<div class="language-json highlighter-rouge"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nt">"extends"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"./node_modules/coding-standard/eslintDefaults.js"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"./node_modules/coding-standard/.eslintrc-es6"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"./node_modules/coding-standard/.eslintrc-jsx"</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nt">"rules"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nt">"eqeqeq"</span><span class="p">:</span><span class="w"> </span><span class="s2">"warn"</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
</div>

<h3 id="using-eslintall">Using <code class="highlighter-rouge">"eslint:all"</code><a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#using-eslintall" aria-label="Anchor link for: using eslintall" data-anchorjs-icon=""></a><a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#using-eslintall" aria-label="Anchor link for: using eslintall" data-anchorjs-icon=""></a></h3>

<p>The <code class="highlighter-rouge">extends</code> property value can be <code class="highlighter-rouge">"eslint:all"</code>
 to enable all core rules in the currently installed version of ESLint. 
The set of core rules can change at any minor or major version of 
ESLint.</p>

<p><strong>Important:</strong> This configuration is <strong>not recommended for production use</strong> because it changes with every minor and major version of ESLint. Use at your own risk.</p>

<p>If you configure ESLint to automatically enable new rules when you 
upgrade, ESLint can report new problems when there are no changes to 
source code, therefore any newer minor version of ESLint can behave as 
if it has breaking changes.</p>

<p>You might enable all core rules as a shortcut to explore rules and 
options while you decide on the configuration for a project, especially 
if you rarely override options or disable rules. The default options for
 rules are not endorsements by ESLint (for example, the default option 
for the <code class="highlighter-rouge">quotes</code> rule does not mean double quotes are better than single quotes).</p>

<p>If your configuration extends all core rules: after you upgrade to a 
newer major or minor version of ESLint, review the reported problems 
before you use the <code class="highlighter-rouge">--fix</code> option on the <a href="http://eslint.org/docs/user-guide/command-line-interface#fix">command line</a>, so you know if a new fixable rule will make changes to the code.</p>

<p>Example of a configuration file in JavaScript format:</p>

<div class="language-js highlighter-rouge"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s2">"extends"</span><span class="p">:</span> <span class="s2">"eslint:all"</span><span class="p">,</span>
    <span class="s2">"rules"</span><span class="p">:</span> <span class="p">{</span>
        <span class="c1">// override default options</span>
        <span class="s2">"comma-dangle"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"error"</span><span class="p">,</span> <span class="s2">"always"</span><span class="p">],</span>
        <span class="s2">"indent"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"error"</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
        <span class="s2">"no-cond-assign"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"error"</span><span class="p">,</span> <span class="s2">"always"</span><span class="p">],</span>

        <span class="c1">// disable now, but enable in the future</span>
        <span class="s2">"one-var"</span><span class="p">:</span> <span class="s2">"off"</span><span class="p">,</span> <span class="c1">// ["error", "never"]</span>

        <span class="c1">// disable</span>
        <span class="s2">"init-declarations"</span><span class="p">:</span> <span class="s2">"off"</span><span class="p">,</span>
        <span class="s2">"no-console"</span><span class="p">:</span> <span class="s2">"off"</span><span class="p">,</span>
        <span class="s2">"no-inline-comments"</span><span class="p">:</span> <span class="s2">"off"</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre>
</div>

<h2 id="comments-in-configuration-files">Comments in Configuration Files<a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#comments-in-configuration-files" aria-label="Anchor link for: comments in configuration files" data-anchorjs-icon=""></a><a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#comments-in-configuration-files" aria-label="Anchor link for: comments in configuration files" data-anchorjs-icon=""></a></h2>

<p>Both the JSON and YAML configuration file formats support comments (<code class="highlighter-rouge">package.json</code>
 files should not include them). You can use JavaScript-style comments 
or YAML-style comments in either type of file and ESLint will safely 
ignore them. This allows your configuration files to be more 
human-friendly. For example:</p>

<div class="language-js highlighter-rouge"><pre class="highlight"><code><span class="p">{</span>
    <span class="s2">"env"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"browser"</span><span class="err">:</span> <span class="kc">true</span>
    <span class="p">},</span>
    <span class="s2">"rules"</span><span class="err">:</span> <span class="p">{</span>
        <span class="c1">// Override our default settings just for this directory</span>
        <span class="s2">"eqeqeq"</span><span class="err">:</span> <span class="s2">"warn"</span><span class="p">,</span>
        <span class="s2">"strict"</span><span class="err">:</span> <span class="s2">"off"</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre>
</div>

<h2 id="specifying-file-extensions-to-lint">Specifying File extensions to Lint<a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#specifying-file-extensions-to-lint" aria-label="Anchor link for: specifying file extensions to lint" data-anchorjs-icon=""></a><a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#specifying-file-extensions-to-lint" aria-label="Anchor link for: specifying file extensions to lint" data-anchorjs-icon=""></a></h2>

<p>Currently the sole method for telling ESLint which file extensions to
 lint is by specifying a comma separated list of extensions using the <a href="http://eslint.org/docs/user-guide/command-line-interface#ext"><code class="highlighter-rouge">--ext</code></a> command line option.</p>

<h2 id="ignoring-files-and-directories">Ignoring Files and Directories<a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#ignoring-files-and-directories" aria-label="Anchor link for: ignoring files and directories" data-anchorjs-icon=""></a><a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#ignoring-files-and-directories" aria-label="Anchor link for: ignoring files and directories" data-anchorjs-icon=""></a></h2>

<p>You can tell ESLint to ignore specific files and directories by creating an <code class="highlighter-rouge">.eslintignore</code> file in your project’s root directory. The <code class="highlighter-rouge">.eslintignore</code>
 file is a plain text file where each line is a glob pattern indicating 
which paths should be omitted from linting. For example, the following 
will omit all JavaScript files:</p>

<div class="language-text highlighter-rouge"><pre class="highlight"><code>**/*.js
</code></pre>
</div>

<p>When ESLint is run, it looks in the current working directory to find an <code class="highlighter-rouge">.eslintignore</code>
 file before determining which files to lint. If this file is found, 
then those preferences are applied when traversing directories. Only one
 <code class="highlighter-rouge">.eslintignore</code> file can be used at a time, so <code class="highlighter-rouge">.eslintignore</code> files other than the one in the current working directory will not be used.</p>

<p>Globs are matched using <a href="https://github.com/kaelzhang/node-ignore">node-ignore</a>, so a number of features are available:</p>

<ul>
  <li>Lines beginning with <code class="highlighter-rouge">#</code> are treated as comments and do not affect ignore patterns.</li>
  <li>Paths are relative to <code class="highlighter-rouge">.eslintignore</code> location or the current working directory. This also influences paths passed via <code class="highlighter-rouge">--ignore-pattern</code>.</li>
  <li>Ignore patterns behave according to the <code class="highlighter-rouge">.gitignore</code> <a href="http://git-scm.com/docs/gitignore">specification</a></li>
  <li>Lines preceded by <code class="highlighter-rouge">!</code> are negated patterns that re-include a pattern that was ignored by an earlier pattern.</li>
</ul>

<p>In addition to any patterns in a <code class="highlighter-rouge">.eslintignore</code> file, ESLint always ignores files in <code class="highlighter-rouge">/node_modules/*</code> and <code class="highlighter-rouge">/bower_components/*</code>.</p>

<p>For example, placing the following <code class="highlighter-rouge">.eslintignore</code> file in the current working directory will ignore all of <code class="highlighter-rouge">node_modules</code>, <code class="highlighter-rouge">bower_components</code>, any files with the extensions <code class="highlighter-rouge">.ts.js</code> or <code class="highlighter-rouge">.coffee.js</code> extension that might have been transpiled, and anything in the <code class="highlighter-rouge">build/</code> directory except <code class="highlighter-rouge">build/index.js</code>:</p>

<div class="language-text highlighter-rouge"><pre class="highlight"><code># /node_modules/* and /bower_components/* ignored by default

# Ignore built files except build/index.js
build/*
!build/index.js
</code></pre>
</div>

<h3 id="using-an-alternate-file">Using an Alternate File<a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#using-an-alternate-file" aria-label="Anchor link for: using an alternate file" data-anchorjs-icon=""></a><a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#using-an-alternate-file" aria-label="Anchor link for: using an alternate file" data-anchorjs-icon=""></a></h3>

<p>If you’d prefer to use a different file than the <code class="highlighter-rouge">.eslintignore</code> in the current working directory, you can specify it on the command line using the <code class="highlighter-rouge">--ignore-path</code> option. For example, you can use <code class="highlighter-rouge">.jshintignore</code> file because it has the same format:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>eslint --ignore-path .jshintignore file.js
</code></pre>
</div>

<p>You can also use your <code class="highlighter-rouge">.gitignore</code> file:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>eslint --ignore-path .gitignore file.js
</code></pre>
</div>

<p>Any file that follows the standard ignore file format can be used. Keep in mind that specifying <code class="highlighter-rouge">--ignore-path</code> means that any existing <code class="highlighter-rouge">.eslintignore</code> file will not be used. Note that globbing rules in <code class="highlighter-rouge">.eslintignore</code> follow those of <code class="highlighter-rouge">.gitignore</code>.</p>

<h3 id="ignored-file-warnings">Ignored File Warnings<a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#ignored-file-warnings" aria-label="Anchor link for: ignored file warnings" data-anchorjs-icon=""></a><a style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;" class="anchorjs-link " href="#ignored-file-warnings" aria-label="Anchor link for: ignored file warnings" data-anchorjs-icon=""></a></h3>

<p>When you pass directories to ESLint, files and directories are 
silently ignored. If you pass a specific file to ESLint, then you will 
see a warning indicating that the file was skipped. For example, suppose
 you have an <code class="highlighter-rouge">.eslintignore</code> file that looks like this:</p>

<div class="language-text highlighter-rouge"><pre class="highlight"><code>foo.js
</code></pre>
</div>

<p>And then you run:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>eslint foo.js
</code></pre>
</div>

<p>You’ll see this warning:</p>

<div class="language-text highlighter-rouge"><pre class="highlight"><code>foo.js
  0:0  warning  File ignored because of your .eslintignore file. Use --no-ignore to override.

✖ 1 problem (0 errors, 1 warning)
</code></pre>
</div>

<p>This message occurs because ESLint is unsure if you wanted to 
actually lint the file or not. As the message indicates, you can use <code class="highlighter-rouge">--no-ignore</code> to omit using the ignore rules.</p>

  </article>
</main>

    <hr>

    <div class="container">

      <footer>
        <ul class="list-inline">
          <li><a href="https://groups.google.com/group/eslint">Mailing List</a></li>
          <li><a href="https://github.com/eslint/eslint">GitHub</a></li>
          <li><a href="https://twitter.com/geteslint">Twitter</a></li>
          <li>Copyright jQuery Foundation and other contributors, <a href="https://jquery.org/">https://jquery.org/</a></li>
        </ul>
      </footer>
    </div><!-- /.container -->


  <script id="suggestion-item-template" type="text/template">
  
  {{#isCategoryHeader}}<div class="suggestion-category">{{{category}}}</div>{{/isCategoryHeader}}
  <div class="suggestion {{#isCategoryHeader}}suggestion-is-category-header{{/isCategoryHeader}}">
    <div class="suggestion-subcategory-main">{{#isSubcategoryHeader}}{{{subcategory}}}{{/isSubcategoryHeader}}</div>
    <div class="suggestion-content">
      <div class="suggestion-subcategory-secondary">{{{subcategory}}}</div>
      <div class="suggestion-title">{{{title}}}</div>
      <div class="suggestion-text">{{{text}}}</div>
    </div>
  </div>
  
  </script>

  <script src="01_ESLint_pliki/jquery-1.js"></script>
  <script src="01_ESLint_pliki/bootstrap.js"></script>
  <script src="01_ESLint_pliki/anchor.js"></script>
  <script src="01_ESLint_pliki/search.js"></script>
  <script>
    $(document).ready(function() {
      anchors.add('.doc h2, .doc h3, .doc h4, .blog h2, .blog h3, .blog h4');
      
    });
  </script>



</body></html>